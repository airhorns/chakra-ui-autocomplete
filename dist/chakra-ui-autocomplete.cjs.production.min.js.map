{"version":3,"file":"chakra-ui-autocomplete.cjs.production.min.js","sources":["../src/index.tsx"],"sourcesContent":["/* eslint-disable prettier/prettier */\nimport * as React from 'react'\nimport {\n  useCombobox,\n  useMultipleSelection,\n  UseMultipleSelectionProps\n} from 'downshift'\nimport matchSorter from 'match-sorter'\nimport Highlighter from 'react-highlight-words'\nimport useDeepCompareEffect from 'react-use/lib/useDeepCompareEffect'\nimport { FormLabel, FormLabelProps } from '@chakra-ui/form-control'\nimport {\n  Text,\n  Stack,\n  Box,\n  BoxProps,\n  List,\n  ListItem,\n  ListIcon\n} from '@chakra-ui/layout'\nimport { Button, ButtonProps } from '@chakra-ui/button'\nimport { Input, InputProps } from '@chakra-ui/input'\nimport { IconProps, CheckCircleIcon, ArrowDownIcon } from '@chakra-ui/icons'\nimport { Tag, TagCloseButton, TagLabel, TagProps } from '@chakra-ui/tag'\nimport { ComponentWithAs } from '@chakra-ui/react'\n\nexport interface Item {\n  label: string\n  value: string\n}\n\nexport interface CUIAutoCompleteProps<T extends Item>\n  extends UseMultipleSelectionProps<T> {\n  items: T[]\n  placeholder: string\n  label: string | false\n  highlightItemBg?: string\n  onCreateItem?: (item: T) => void\n  optionFilterFunc?: (items: T[], inputValue: string) => T[]\n  itemRenderer?: (item: T) => string | JSX.Element\n  labelStyleProps?: FormLabelProps\n  inputStyleProps?: InputProps\n  toggleButtonStyleProps?: ButtonProps\n  tagStyleProps?: TagProps\n  listStyleProps?: BoxProps\n  listItemStyleProps?: BoxProps\n  emptyState?: (inputValue: string) => React.ReactNode\n  selectedIconProps?: Omit<IconProps, 'name'> & {\n    icon: IconProps['name'] | React.ComponentType\n  }\n  icon?: ComponentWithAs<'svg', IconProps>\n  hideToggleButton?: boolean\n  createItemRenderer?: (value: string) => string | JSX.Element\n  disableCreateItem?: boolean\n  renderCustomInput?: (inputProps: any, toggleButtonProps: any) => JSX.Element\n}\n\nfunction defaultOptionFilterFunc<T>(items: T[], inputValue: string) {\n  return matchSorter(items, inputValue, { keys: ['value', 'label'] })\n}\n\nfunction defaultCreateItemRenderer(value: string) {\n  return (\n    <Text>\n      <Box as='span'>Create</Box>{' '}\n      <Box as='span' bg='yellow.300' fontWeight='bold'>\n        \"{value}\"\n      </Box>\n    </Text>\n  )\n}\n\nexport const CUIAutoComplete = <T extends Item>(\n  props: CUIAutoCompleteProps<T>\n): React.ReactElement<CUIAutoCompleteProps<T>> => {\n  const {\n    items,\n    optionFilterFunc = defaultOptionFilterFunc,\n    itemRenderer,\n    highlightItemBg = 'gray.100',\n    placeholder,\n    label,\n    listStyleProps,\n    labelStyleProps,\n    inputStyleProps,\n    toggleButtonStyleProps,\n    tagStyleProps,\n    selectedIconProps,\n    listItemStyleProps,\n    onCreateItem,\n    icon,\n    hideToggleButton = false,\n    disableCreateItem = false,\n    createItemRenderer = defaultCreateItemRenderer,\n    renderCustomInput,\n    ...downshiftProps\n  } = props\n\n  /* States */\n  const [isCreating, setIsCreating] = React.useState(false)\n  const [inputValue, setInputValue] = React.useState('')\n  const [inputItems, setInputItems] = React.useState<T[]>(items)\n\n  /* Refs */\n  const disclosureRef = React.useRef(null)\n\n  /* Downshift Props */\n  const {\n    getSelectedItemProps,\n    getDropdownProps,\n    addSelectedItem,\n    removeSelectedItem,\n    selectedItems\n  } = useMultipleSelection(downshiftProps)\n  const selectedItemValues = selectedItems.map((item) => item.value)\n\n  const {\n    isOpen,\n    getToggleButtonProps,\n    getLabelProps,\n    getMenuProps,\n    getInputProps,\n    getComboboxProps,\n    highlightedIndex,\n    getItemProps,\n    openMenu,\n    selectItem,\n    setHighlightedIndex\n  } = useCombobox({\n    inputValue,\n    selectedItem: undefined,\n    items: inputItems,\n    onInputValueChange: ({ inputValue, selectedItem }) => {\n      const filteredItems = optionFilterFunc(items, inputValue || '')\n\n      if (isCreating && filteredItems.length > 0) {\n        setIsCreating(false)\n      }\n\n      if (!selectedItem) {\n        setInputItems(filteredItems)\n      }\n    },\n    stateReducer: (state, actionAndChanges) => {\n      const { changes, type } = actionAndChanges\n      switch (type) {\n        case useCombobox.stateChangeTypes.InputBlur:\n          return {\n            ...changes,\n            isOpen: false\n          }\n        case useCombobox.stateChangeTypes.InputKeyDownEnter:\n        case useCombobox.stateChangeTypes.ItemClick:\n          return {\n            ...changes,\n            highlightedIndex: state.highlightedIndex,\n            inputValue,\n            isOpen: true\n          }\n        case useCombobox.stateChangeTypes.FunctionSelectItem:\n          return {\n            ...changes,\n            inputValue\n          }\n        default:\n          return changes\n      }\n    },\n    // @ts-ignore\n    onStateChange: ({ inputValue, type, selectedItem }) => {\n      switch (type) {\n        case useCombobox.stateChangeTypes.InputChange:\n          setInputValue(inputValue || '')\n          break\n        case useCombobox.stateChangeTypes.InputKeyDownEnter:\n        case useCombobox.stateChangeTypes.ItemClick:\n          if (selectedItem) {\n            if (selectedItemValues.includes(selectedItem.value)) {\n              removeSelectedItem(selectedItem)\n            } else {\n              if (onCreateItem && isCreating) {\n                onCreateItem(selectedItem)\n                setIsCreating(false)\n                setInputItems(items)\n                setInputValue('')\n              } else {\n                addSelectedItem(selectedItem)\n              }\n            }\n\n            // @ts-ignore\n            selectItem(null)\n          }\n          break\n        default:\n          break\n      }\n    }\n  })\n\n  React.useEffect(() => {\n    if (inputItems.length === 0 && !disableCreateItem) {\n      setIsCreating(true)\n      // @ts-ignore\n      setInputItems([{ label: `${inputValue}`, value: inputValue }])\n      setHighlightedIndex(0)\n    }\n  }, [\n    inputItems,\n    setIsCreating,\n    setHighlightedIndex,\n    inputValue,\n    disableCreateItem\n  ])\n\n  useDeepCompareEffect(() => {\n    setInputItems(items)\n  }, [items])\n\n  /* Default Items Renderer */\n  function defaultItemRenderer<T extends Item>(selected: T) {\n    return selected.label\n  }\n\n  return (\n    <Stack>\n      {label && <FormLabel {...{ ...getLabelProps({}), ...labelStyleProps }}>\n        {label}\n      </FormLabel>}\n\n      {/* ---------Stack with Selected Menu Tags above the Input Box--------- */}\n      {selectedItems && (\n        <Stack spacing={2} isInline flexWrap='wrap'>\n          {selectedItems.map((selectedItem, index) => (\n            <Tag\n              mb={1}\n              {...tagStyleProps}\n              key={`selected-item-${index}`}\n              {...getSelectedItemProps({ selectedItem, index })}\n            >\n              <TagLabel>{selectedItem.label}</TagLabel>\n              <TagCloseButton\n                onClick={(e) => {\n                  e.stopPropagation()\n                  removeSelectedItem(selectedItem)\n                }}\n                aria-label='Remove menu selection badge'\n              />\n            </Tag>\n          ))}\n        </Stack>\n      )}\n      {/* ---------Stack with Selected Menu Tags above the Input Box--------- */}\n\n      {/* -----------Section that renders the input element ----------------- */}\n      <Stack isInline {...getComboboxProps()}>\n        {renderCustomInput ? (\n          renderCustomInput(\n            {\n              ...inputStyleProps,\n              ...getInputProps(\n                getDropdownProps({\n                  placeholder,\n                  onClick: isOpen ? () => {} : openMenu,\n                  onFocus: isOpen ? () => {} : openMenu,\n                  ref: disclosureRef\n                })\n              )\n            },\n            {\n              ...toggleButtonStyleProps,\n              ...getToggleButtonProps(),\n              ariaLabel: 'toggle menu',\n              hideToggleButton\n            }\n          )\n        ) : (\n          <>\n            <Input\n              {...inputStyleProps}\n              {...getInputProps(\n                getDropdownProps({\n                  placeholder,\n                  onClick: isOpen ? () => {} : openMenu,\n                  onFocus: isOpen ? () => {} : openMenu,\n                  ref: disclosureRef\n                })\n              )}\n            />\n            {!hideToggleButton && (\n              <Button\n                {...toggleButtonStyleProps}\n                {...getToggleButtonProps()}\n                aria-label='toggle menu'\n              >\n                <ArrowDownIcon />\n              </Button>\n            )}\n          </>\n        )}\n      </Stack>\n      {/* -----------Section that renders the input element ----------------- */}\n\n      {/* -----------Section that renders the Menu Lists Component ----------------- */}\n      <Box pb={4} mb={4}>\n        <List\n          bg='white'\n          borderRadius='4px'\n          border={isOpen && '1px solid rgba(0,0,0,0.1)'}\n          boxShadow='6px 5px 8px rgba(0,50,30,0.02)'\n          {...listStyleProps}\n          {...getMenuProps()}\n        >\n          {isOpen &&\n            inputItems.map((item, index) => (\n              <ListItem\n                px={2}\n                py={1}\n                borderBottom='1px solid rgba(0,0,0,0.01)'\n                {...listItemStyleProps}\n                bg={highlightedIndex === index ? highlightItemBg : 'inherit'}\n                key={`${item.value}${index}`}\n                {...getItemProps({ item, index })}\n              >\n                {isCreating ? (\n                  createItemRenderer(item.label)\n                ) : (\n                  <Box display='inline-flex' alignItems='center'>\n                    {selectedItemValues.includes(item.value) && (\n                      <ListIcon\n                        as={icon || CheckCircleIcon}\n                        color='green.500'\n                        role='img'\n                        display='inline'\n                        aria-label='Selected'\n                        {...selectedIconProps}\n                      />\n                    )}\n\n                    {itemRenderer ? (\n                      itemRenderer(item)\n                    ) : (\n                      <Highlighter\n                        autoEscape\n                        searchWords={[inputValue || '']}\n                        textToHighlight={defaultItemRenderer(item)}\n                      />\n                    )}\n                  </Box>\n                )}\n              </ListItem>\n            ))}\n        </List>\n      </Box>\n      {/* ----------- End Section that renders the Menu Lists Component ----------------- */}\n    </Stack>\n  )\n}\n"],"names":["defaultOptionFilterFunc","items","inputValue","matchSorter","keys","defaultCreateItemRenderer","value","React","Text","Box","as","bg","fontWeight","props","optionFilterFunc","itemRenderer","highlightItemBg","placeholder","label","listStyleProps","labelStyleProps","inputStyleProps","toggleButtonStyleProps","tagStyleProps","selectedIconProps","listItemStyleProps","onCreateItem","icon","hideToggleButton","disableCreateItem","createItemRenderer","renderCustomInput","downshiftProps","isCreating","setIsCreating","setInputValue","inputItems","setInputItems","disclosureRef","useMultipleSelection","getSelectedItemProps","getDropdownProps","addSelectedItem","removeSelectedItem","selectedItems","selectedItemValues","map","item","useCombobox","selectedItem","undefined","onInputValueChange","filteredItems","length","stateReducer","state","actionAndChanges","changes","type","stateChangeTypes","InputBlur","isOpen","InputKeyDownEnter","ItemClick","highlightedIndex","FunctionSelectItem","onStateChange","InputChange","includes","selectItem","getToggleButtonProps","getLabelProps","getMenuProps","getInputProps","getComboboxProps","getItemProps","openMenu","setHighlightedIndex","useDeepCompareEffect","Stack","FormLabel","spacing","isInline","flexWrap","index","Tag","mb","key","TagLabel","TagCloseButton","onClick","e","stopPropagation","onFocus","ref","ariaLabel","Input","Button","ArrowDownIcon","pb","List","borderRadius","border","boxShadow","ListItem","px","py","borderBottom","display","alignItems","ListIcon","CheckCircleIcon","color","role","Highlighter","autoEscape","searchWords","textToHighlight","selected"],"mappings":"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"}